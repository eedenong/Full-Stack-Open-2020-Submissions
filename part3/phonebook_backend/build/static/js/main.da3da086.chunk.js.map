{"version":3,"sources":["services/numbers.js","components/PersonForm.js","components/Filter.js","components/Person.js","components/Numbers.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","person","post","id","delete","console","log","newPerson","put","PersonForm","persons","setPersons","newName","newNumber","setNewName","setNewNumber","setNotification","setError","onSubmit","event","preventDefault","nameExists","i","length","name","checkDuplicateName","numberExists","number","checkDuplicateNumber","isDuplicate","alert","isUnique","numberService","returnedPerson","concat","setTimeout","catch","error","err","addEntry","window","changeNumber","confirm","personToEdit","map","editEntry","find","value","onChange","target","type","Filter","newFilter","setFilterValue","showAll","setShowAll","Person","handleDelete","onClick","Numbers","personsToShow","filter","nameLowerCased","toLowerCase","filterLowerCased","includes","deleteId","ret","p","key","Notification","message","isError","className","App","useState","notification","useEffect","returnedPersons","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da3da086.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n//getAll \nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    //return the promise containing the response data\n    return request.then(response => response.data)\n}\n\nconst create = (person) => {\n    const request = axios.post(baseUrl, person);\n    return request.then(response => response.data )\n}\n\nconst remove = (id) => {\n    // remove from database using the person's id\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => {\n        console.log('response data from delete request is ', response.data);\n    })\n}\n\nconst edit = (newPerson) => {\n    const request = axios.put(`${baseUrl}/${newPerson.id}`, newPerson)\n    return request.then(response => {\n        console.log('response data from edit is ', response.data);\n        return response.data\n    })\n}\n\nexport default {\n    getAll,\n    create,\n    remove,\n    edit\n}","import React from 'react'\nimport numberService from '../services/numbers'\n\nconst PersonForm = ({persons, setPersons, newName, newNumber, setNewName, setNewNumber, setNotification, setError}) => {\n    \n    function addEntry() {\n        // create a person and add it\n        const newPerson = {\n            name: newName,\n            number: newNumber,\n        }\n        console.log('new person created: ', newPerson);\n        //define the axios post request to put data into the db\n        numberService\n            .create(newPerson)\n            .then(returnedPerson => {\n                console.log('post request response is ', returnedPerson);\n                setPersons(persons.concat(returnedPerson))\n                setNewName('')\n                setNewNumber('') \n                setNotification(`Added ${newName}`)\n                setTimeout(() => {\n                    setNotification(null)\n                }, 3000)\n            })\n            .catch(error => {\n                const err = error.response.data\n                console.log(err);\n                setNotification(err.error)\n                setError(true)\n\n                setTimeout(() => {\n                    setNotification(null)\n                    setError(false)\n                }, 5000)\n            })\n        console.log('person added to database');\n        console.log('persons list in addPerson is ', persons)\n    }\n\n    function editEntry(personToEdit) {\n        const newPerson = {...personToEdit, number:newNumber}\n        console.log('newPerson created is ', newPerson);\n        numberService\n            .edit(newPerson)\n            .then(returnedPerson => {\n                console.log('put request response is ', returnedPerson);\n                setNewName('')\n                setNewNumber('')\n                setPersons(persons.map(person => {\n                    const name = person.name\n                    if (name === newName) {\n                        return returnedPerson\n                    } else {\n                        return person\n                    }\n                }))\n                setNotification(`Edited ${newName}'s number to ${newNumber}`)\n                setTimeout(() => {\n                    setNotification(null)\n                }, 3000)\n            })\n            .catch(error => {\n                const err = error.response.data\n                console.log(err);\n                setNotification(err.error)\n                setError(true)\n\n                setTimeout(() => {\n                    setNotification(null)\n                    setError(false)\n                }, 5000)\n            })\n    }\n    // function to check phonebook if there is a person with an already existing name \n    function checkDuplicateName() {\n        // check if the name already exists in the persons array\n        let nameExists = false\n        for (let i = 0; i < persons.length; i++) {\n            if (persons[i].name === newName) {\n                nameExists = true\n            }\n        }\n        return nameExists\n    }\n\n    function checkDuplicateNumber() {\n        let numberExists = false\n        for (let i = 0; i < persons.length; i++) {\n            if (persons[i].number === newNumber) {\n                numberExists = true\n            }\n        }\n        return numberExists\n    }\n\n    // event handler for add button\n    const addPerson = (event) => {\n        event.preventDefault()\n        \n        // isDuplicate indicates whether a person of the same name exists in the phonebook\n        const nameExists = checkDuplicateName()\n        const numberExists = checkDuplicateNumber()\n\n        console.log('name exists: ', nameExists);\n        console.log('number exists: ', numberExists);\n        // person is considered duplicate iff name and number both already exist\n        const isDuplicate = nameExists && numberExists\n        console.log('isDuplicate: ', isDuplicate);\n        // guard clause for duplicate person addition\n        if (isDuplicate) {\n            alert(`${newName} is already added to phonebook`)\n        }\n\n        // if the person to be added is unique, just add it straightaway\n        const isUnique = (!nameExists && !numberExists)\n        console.log('isUnique: ', isUnique);\n        if (isUnique) {\n            addEntry()\n        }\n        \n        // two persons cannot have the same number, alert the user in such a case\n        const twoSameNumbers = !nameExists && numberExists\n        if (twoSameNumbers) {\n            window.alert('Two people cannot have the same number!')\n        }\n\n        // if name already exists but the number entered is different, ask user for confirmation\n        // if the user wants to change the number\n        const changeNumber = nameExists && !numberExists\n        console.log('change number: ', changeNumber);\n        if (changeNumber) {\n            const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n            // if the user confirms, then add the entry. otherwise, do nothing\n            if (result) {\n                const personToEdit = persons.find(person => person.name === newName)\n                editEntry(personToEdit)\n            }\n        }\n    }\n\n    // event handler for name input\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    // event handler for number input\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n  return (\n      <div>\n        <form onSubmit={addPerson} >\n            <div>\n                name: <input value={newName} onChange={handleNameChange} />\n            </div>\n            <div>\n                number: <input value={newNumber} onChange={handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n      </div>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({newFilter, setFilterValue, showAll, setShowAll}) => {\n    \n    // event handler for filter input\n    const handleFilterChange = (event) => {\n        setFilterValue(event.target.value)\n    }\n\n    // event handler for filter field\n    const showFiltered = (event) => {\n        event.preventDefault()\n        setShowAll(!showAll)\n    }\n\n    return (\n        <div>\n            <form onSubmit={showFiltered} >\n                <div>\n                    filter shown with: <input value={newFilter} onChange={handleFilterChange} />\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Person = ({name, number, handleDelete}) => {\n    return (\n        <div>\n            {name} {number} <button onClick={handleDelete}>delete</button>\n        </div>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\nimport numberService from '../services/numbers'\n\nconst Numbers = ({persons, setPersons, showAll, newFilter, setError, setNotification}) => {\n    const personsToShow = showAll ? persons : persons.filter(person => {\n        const nameLowerCased = person.name.toLowerCase()\n        const filterLowerCased = newFilter.toLowerCase()\n        return nameLowerCased.includes(filterLowerCased)\n    })\n\n    const handleDelete = (person) => {\n        return () => {\n            console.log('person to be deleted: ', person.name);\n            if (window.confirm(`Delete ${person.name} ?`)) {\n                const deleteId = person.id\n                numberService\n                    .remove(deleteId)\n                    .then(ret => {\n                        setPersons(persons.filter(p => p.id !== deleteId))\n                        setNotification(`${person.name} deleted`)\n                    })\n                    .catch(error => {\n                        setPersons(persons.filter(p => p.id !== deleteId))\n                        setError(true)\n                        setNotification(`${person.name} has already been removed from the server`)\n\n                        setTimeout(() => {\n                            setNotification(null)\n                            setError(false)\n                        }, 3000)\n                    })\n            }\n        }\n    }\n    return (\n        <div>\n            {personsToShow.length === 0 \n                ? 'Cannot find any numbers with the current filter!' \n                :personsToShow.map(person => {\n                    return (\n                    <div key={person.id}>\n                        <Person name={person.name} number={person.number} id={person.id} handleDelete={handleDelete(person)} />\n                    </div>\n                )\n                \n            })}\n        </div>\n    )\n}\n\nexport default Numbers","import React from 'react'\n\nconst Notification = ({ message, isError }) => {\n    if (message === null) {\n        return null\n    }\n\n    if (!isError) {\n        return (\n            <div className=\"success\">\n                {message}\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Numbers from './components/Numbers'\nimport numberService from './services/numbers'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setFilterValue ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ notification, setNotification ] = useState(null)\n  const [ isError, setError ] = useState(false)\n  \n  //get persons from database\n  useEffect(() => {\n    console.log('Getting list of persons from database');\n    numberService\n      .getAll()\n      .then(returnedPersons => {\n        console.log('returnedPersons is', returnedPersons);\n        setPersons(returnedPersons)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} isError={isError} />\n      <Filter newFilter={newFilter} setFilterValue={setFilterValue} showAll={showAll} setShowAll={setShowAll}/>\n      <h2>Add new number</h2>\n      <PersonForm persons={persons} setPersons={setPersons} newName={newName} newNumber={newNumber}\n       setNewName={setNewName} setNewNumber={setNewNumber}\n      setNotification={setNotification} setError={setError} />\n      <h2>Numbers</h2>\n      <Numbers persons={persons} setPersons={setPersons} showAll={showAll} newFilter={newFilter} setError={setError} setNotification={setNotification}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}